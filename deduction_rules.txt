Argument properties
-------------------
argument
//    * from text
    * [WARNING] if operation is set_value, add_value, add_values, type isn't bool and value is None

callback
    * show_help if flags contains -h --help or /?

count
    * 0..1 if operation is set_value
    * 0.. if add_value or add_values

flags
    x* from text

index
    * from order in the file, but explicit indexes first

[inline]

// member_name
//    * from longest name in flags
//    * from argument

operation
    * set_value if type isn't list
    * add_value if type is list

post_operation
    * stop if callback is show_help
    * final if flag is --

separator
    * deduce from argument if detect_separators is True

separator_count
    * deduce from argument and separator
    * deduce from operation and separator

// text
//    * raw_text

value
    * "true" if argument is None and operation is set_value or add_value
    * "true" if type is "bool"

[values]

[raw_text]


Member properties
-----------------
default
    * just {}

[member_inline]

[member_callback]

type
    * from default
    * from value
    * from values
    * from count (list if count is/can be greater than one)
    * from separator_count (list or tuple is greater than zero)
    * from operation (list if add_value or add_values)








text: from the displayed text unless given
flags: from text
meta_variable: from text
separator: meta_variable
separator_count: meta_variable and separator
count: from flags or text
index: from position in file
member_name: argument_type, longest name among flags or meta_variable
value: argument_type, type
argument_type: flags, count

action
callback


type: default, value, values, meta_variable
default: type
values: type


member_action
member_callback


Argument properties
-------------------
action
argument_type
callback
count
flags
index
member_name
meta_variable
separator
separator_count
text
value

Member properties
-----------------
default
member_action
member_callback
values
value_type
container_type